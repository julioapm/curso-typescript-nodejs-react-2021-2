// 1. Escreva um trecho de c√≥digo para imprimir os n√∫meros pares definidos por um intervalo de valores inteiros
// n√£o-negativos inicio e fim. Utilize vers√µes com for e while.

// R: Utilizando o for
for (let i = 2; i <= 10; i++) {
    if (i % 2 == 0) {
        console.log (i);
    }
}
  
// R: Utilizando o while
let numero: number = 2;

while (numero <= 10) {
    if (numero % 2 == 0) {
        console.log(numero) 
    }
    numero++
}


// 2. Qual o resultado do seguinte bloco de comandos? Qual a explica√ß√£o para o resultado?
// let i: number = 0;
// while (i != 10) {
//  i += 0.2;
// }

// R: O resultado do bloco de comando ser√° um loop, j√° que o while nunca ser√° false, pois
// a var√≠avel i ter√° o valor "9.99" e ap√≥s essa execu√ß√£o, ter√° o valor "10.19", nunca
// chegando aos "10", para o loop deixar de ser executado.


// 3. Escreva uma fun√ß√£o min(x,y) que devolve o menor entre dois n√∫meros. N√£o use fun√ß√µes auxiliares de
// Math. Utilize corretamente a declara√ß√£o de tipos nos par√¢metros e no resultado da fun√ß√£o

function min(x: number, y: number) {
    if (x > y) {
        return x;
    } else if (x < y) {
        return y;
    } else {
        return "Os 2 n√∫meros possuem o mesmo valor";
    }
}
console.log(min(5,3))


// 4. Escreva uma fun√ß√£o pow(x,y) que calcula o valor de ùë•^ùë¶, ou seja, x elevado a pot√™ncia y. Assuma que os
// valores de x e y s√£o n√∫meros inteiros n√£o negativos e que ùë•^0 = 1 para qualquer valor de x. Apresente uma
// vers√£o iterativa e uma vers√£o recursiva para a fun√ß√£o. N√£o utilize o operador **. Utilize corretamente a
// declara√ß√£o de tipos nos par√¢metros e no resultado da fun√ß√£o.
  
// Vers√£o recursiva
function pow(x: number, y: number):number {
    if (y == 0) {
        return 1;
    } else {
        return x * pow(x, y - 1)
    }
}
console.log(pow(2, 4))
console.log(pow(2, 0))
  
// Vers√£o iterativa
function pow2(x: number, y: number) {
  let resultado = 1;
  for (let count = 0; count < y; count++) {
    resultado *= x;
  }
  return resultado;
};
console.log(pow2(2, 4));


// 5. Escreva uma fun√ß√£o toMaiusculaPrimeira(s) que recebe uma string s (assuma qualquer string n√£o vazia) e
// retorna a mesma string com a primeira letra em mai√∫scula. Utilize corretamente a declara√ß√£o de tipos nos
// par√¢metros e no resultado da fun√ß√£o

function toMaiusculaPrimeira(s: string) {
    return s[0].toUpperCase() + s.slice(1);; 
}
console.log(toMaiusculaPrimeira("teste"))


// 6. Escreva uma fun√ß√£o getMax(arr) que recebe um array de n√∫mero inteiros e retorna o maior elemento
// encontrado no array. Assuma que o array n√£o est√° vazio. N√£o utilize fun√ß√µes auxiliares de outros objetos
// disponibilizados pelo TypeScript. Utilize corretamente a declara√ß√£o de tipos nos par√¢metros e no resultado da
// fun√ß√£o.

function getMax(arr: Array<number>) {
    let max = arr[0];
    for (let i = 1; i < arr.length; ++i) {
    if (arr[i] > max) {
        max = arr[i];          
    }
  }
return max;  
}
console.log(getMax([1, 5, 7, 3, 6, 10, 2]))


// 7. Escreva uma fun√ß√£o que, utilizando objetos Map, calcule a frequ√™ncia de cada n√∫mero presente em um
// determinado array contendo n√∫meros inteiros. Utilize corretamente a declara√ß√£o de tipos nos par√¢metros e no
// resultado da fun√ß√£o.

function frequenciaNumeros(arr: Array<number>) {
    let acc = arr.reduce((acc, val) => acc.set(val, 1 + (acc.get(val) || 0)), new Map());
    return acc;
}
console.log(frequenciaNumeros([5, 5, 5, 2, 2, 2, 2, 2, 9, 4, 2]));